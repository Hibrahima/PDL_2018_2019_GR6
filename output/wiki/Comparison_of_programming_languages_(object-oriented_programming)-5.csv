,basic/void method,value-returning method
ABAP Objects,methods name «'importing' parameter = argument» «'exporting' parameter = argument» «'changing' parameter = argument» «'returning value('parameter')'»<br />method name'.' instructions endmethod.<ref>The declaration and implementation of methods in ABAP are separate. methods statement is to be used inside the class definition. method (without "s") is to be used inside the class implementation. parameter = argument can be repeated if there are several parameters.</ref>,<ref>In ABAP  the return parameter name is explicitly defined in the method signature within the class definition</ref>
void foo'('«parameters»') { 'instructions' }',type foo'('«parameters»') { 'instructions ... return value'; }'
C#
D
Java
eC,void ««type of 'this'»'::'»foo'('«parameters»') { 'instructions' }',type ««type of this»'::'»foo'('«parameters»') { 'instructions ... return value'; }'
Eiffel,foo ( «parameters» )<br /> do <br /> instructions <br /> end,foo ( «parameters» ): TYPE <br /> do <br /> instructions... <br /> Result := value <br /> end
Objective-C,- (void)foo«':'parameter «bar':'parameter ...»»' { 'instructions' }',- (type')'foo«':'parameter «bar':'parameter ...»»' { 'instructions... return value'; }'
Swift,func foo'('«parameters»') { 'instructions' }',func foo'('«parameters»') -> 'type' { 'instructions... return value' }'
Python,def foo'(self'«' ' parameters»'):<br /> 'instructions,def foo'(self'«' ' parameters»'):<br /> 'instructions'<br /> return 'value
Visual Basic .NET,Sub Foo'('«parameters»') <br /> 'instructions' <br /> End Sub',Function Foo'('«parameters»') As 'type' <br /> 'instructions <br /> ... <br /> Return value<br /> End Function
Xojo,Sub Foo'('«parameters»') <br /> 'instructions' <br /> End Sub',Function Foo'('«parameters»') As 'type' <br /> 'instructions <br /> ... <br /> Return value<br /> End Function
PHP,function foo'('«parameters»')«: void» { 'instructions' }',function foo'('«parameters»')«: 'type'» { 'instructions ... return value'; }'
Perl,sub foo' { my ($self'«'  'parameters»') = @_; 'instructions' }',sub foo' { my ($self'«'  'parameters»') = @_; 'instructions ... return value'; }'
Perl 6,«'has' »«'multi' »'method 'foo'('««$self': ' »parameters»') { 'instructions' }',«'has' «type »»«'multi' »'method 'foo'('««$self': ' »parameters»') { 'instructions ... return value'; }'
Ruby,def foo«'('parameters')'» <br /> instructions <br /> end,def foo«'('parameters')'» <br /> instructions <br /> expression resulting in return value <br /> end <br /> or <br /> def foo«'('parameters')»' <br /> instructions <br /> return value <br /> end
Windows PowerShell,Add-Member «'-MemberType'»' ScriptMethod '«'-Name'» foo «'-Value'»' { '«'param('parameters')'»' 'instructions' } -InputObject 'variable,Add-Member «'-MemberType'»' ScriptMethod '«'-Name'» foo «'-Value'»' { '«'param('parameters')'»' 'instructions ... return value } -InputObject variable
OCaml,rowspan=2,method foo «parameters» = expression
F#,member this.foo'('«parameters»') =' expression
JavaScript,this.method' = function('«parameters»') {'instructions'}' <br /> name«.prototype.method' = function('«parameters»') {'instructions'}'<ref name="assign_func">Just assign a function to it in a method</ref>,this.method' = function('«parameters»') {'instructions... return value';}' <br /> name«.prototype.method' = function('«parameters»') {'instructions... return value;}<ref name="assign_func"/>
Javascript (ES6),foo'('«parameters»') {'instructions'}',foo'('«parameters»') {'instructions... return value;}
COBOL
Cobra,def foo'('parameters')'<br /> instructions,def foo'('parameters') as' type<br /> instructions<br /> return value,
ISLISP,
