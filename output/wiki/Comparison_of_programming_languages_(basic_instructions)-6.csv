,Simple composite types,Algebraic data types,Unions
Records,Tuple expression
Ada<ref name="Ada_RM_2012" />,,Any combination of records  unions and enumerations (as well as references to those  enabling recursive types).
ALGOL 68,struct (modename «fieldname»  ...);,Required types and operators can be user defined,union (modename  ...);
C (C99),struct «name» {type name';'...};,rowspan=2,rowspan=3,union {type name';'...};
Objective-C
C++,struct «name» {type name';'...};,«std::»tuple<type1..typen>
C#,struct name {type name';'...},,,rowspan=3
Java,,,
JavaScript,,,
D,struct name {type name';'...},,std.variant.Algebraic!(type ...),union {type name';'...}
Go,struct { «name» type' '...},,,
Swift,struct name { var name «': 'type»' '...},(«name1:» val1  «name2:» val2  «name3:» val3  ... ),enum name { case Foo«'('types')'»' case' Bar «'('types')'» ... },
Common Lisp,,(cons val1 val2),,
Scheme,,,
ISLISP,,,
Pascal,record name':' type';' ...end,,,record case type of value': ('types');' ...end
Visual Basic,,,,
Visual Basic .NET,Structure name Dim name As type ... End Structure,,,
Python,,«'('»val1  val2  val3  ... «')'»,,
S-Lang,struct {name [=value]  ...},,,
Fortran,TYPE name type' :: ' name ... END TYPE,,,
PHP,,,,
Perl,,,,rowspan=3
Perl 6,,,
Ruby,lang=ruby|1=OpenStruct.new({:name => value})}},,
Scala,case class name'('«'var'» name':' type' ' ...),(val1  val2  val3  ... ),
Windows PowerShell,,,,
OCaml,type name = {«'mutable'» name : type';'...},«'('»val1  val2  val3  ... «')'»,type name = Foo «'of' type»' |' Bar «'of' type»' |' ...,rowspan=4
F#
Standard ML,type name = {name : type' '...},(val1  val2  val3  ... ),</nowiki> Bar «of' type»' |''' ...
Haskell,data Name = Constr {name :: type' '...},</nowiki> Bar «types» |''' ...
COBOL,,,name REDEFINES variable type'.'
