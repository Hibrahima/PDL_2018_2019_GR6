,read-write,read-only,write-only
ABAP Objects,colspan=3
C++ (STL),type'& operator[]('type index') { 'instructions' }',type operator[](type index') { 'instructions' }',
C#,type this[type index'] { <br /> get{ 'instructions' } <br /> set{ 'instructions' } }',type this[type index'] { get{ 'instructions' } }',type this[type index'] { set{ 'instructions' } }'
D,type opIndex(type index') { 'instructions' }' <br /> type opIndexAssign(type value'  'type index') { 'instructions' }',type opIndex(type index') { 'instructions' }',type opIndexAssign(type value'  'type index') { 'instructions' }'
Java,colspan=3
Objective-C (recent Clang compiler),,- (id)objectAtIndexedSubscript:(NSUInteger)index' { 'instructions' return 'value'; }' or<br />- (id)objectForKeyedSubscript:(id)index' { 'instructions' return 'value'; }',- (void)setObject:(id)value' atIndexedSubscript:(NSUInteger)'index' { 'instructions' }' or<br />- (void)setObject:(id)value' forKeyedSubscript:(id)'index' { 'instructions' }'
Swift,subscript (index' : 'type') -> 'returntype' { get { 'instructions' } set'«'('newIndex')'»' { 'instructions' } }',subscript (index' : 'type') -> 'returntype' { 'instructions' }',
Eiffel<ref name="Eiffel operators"/>,bracket_name alias "[]" (index: TYPE'):' TYPE assign set_item <br />do instructions end <br /> set_item (value: TYPE; index: TYPE'):' <br />do instructions end,bracket_name alias "[]" (index: TYPE'):' TYPE <br />do instructions end,
Python,def __getitem__(self  index'): <br /> ' instructions <br /> return value <br /> def __setitem__(self  index'  'value'):' <br /> instructions,def __getitem__(self  index'): <br /> ' instructions <br /> return value,def __setitem__(self  index'  'value'):' <br /> instructions
Visual Basic .NET,Default Property Item(Index' As 'type') As 'type' <br /> Get <br /> 'instructions' <br /> End Get <br /> Set(ByVal 'Value' As 'type') <br /> 'instructions' <br /> End Set <br /> End Property',Default ReadOnly Property Item(Index' As 'type') As 'type' <br /> Get <br /> 'instructions' <br /> End Get <br /> End Property',Default WriteOnly Property Item(Index' As 'type') As 'type' <br /> Set(ByVal 'Value' As 'type') <br /> 'instructions' <br /> End Set <br /> End Property'
PHP,<ref>The class must implement the ArrayAccess interface.</ref>
Perl,<ref>The class must overload '@{}' (array dereference) or subclass one of Tie::Array or Tie::StdArray to hook array operations</ref>
Perl 6,«'our' «type »»«'multi' »'method postcircumfix:<[ ]> is rw ('«$self':' » type $index') {' instructions ... return value';' } or<br /> «'our' «type »»«'multi' »'method postcircumfix:<{ }> is rw ('«$self':' » type $key') {' instructions ... return value';' },«'our' «type »»«'multi' »'method postcircumfix:<[ ]>('«$self':' » type $index') {' instructions ... return value';' } or<br /> «'our' «type »»«'multi' »'method postcircumfix:<{ }> ('«$self':' » type $key') {' instructions ... return value';' },
Ruby,def [](index')' <br /> instructions <br /> expression resulting in return value <br /> end <br /> def []=(index  value')' <br /> instructions <br /> end,def [](index')' <br /> instructions <br /> expression resulting in return value <br /> end,def []=(index  value')' <br /> instructions <br /> end
Windows PowerShell,rowspan=2 colspan=3
OCaml
F#,member thisItem with get(index') =' expression and set index value = expression,member thisItem with get(index') =' expression,member thisItem with set index value = expression
COBOL,colspan=3
Cobra,pro[index «'as' type»'] as' type<br /> get<br /> instructions<br /> return value<br /> set<br /> instructions,get[index «'as' type»'] as' type<br /> instructions<br /> return value,set[index «'as' type»'] as' type<br /> instructions
