,Get object type,Is instance of (includes subtypes),Upcasting,Downcasting
Runtime check,No check
ABAP Objects,colspan=2 <ref>Run-time type information in ABAP can be gathered by using different description Classes like CL_ABAP_CLASSDESCR.</ref>,=,?=
C++ (STL),typeid(x')',dynamic_cast<type' *>(&'x') != NULL',rowspan=8 <ref name="implicit_cast">Upcasting is implicit in this language. A subtype instance can be used where a supertype is needed.</ref>,dynamic_cast<type'*>('ptr')',(type'*)' ptr or <br /> static_cast<type'*>('ptr')'
C#,x'.GetType()',x is type,(type')' x or x as type,
D,typeid(x')',,cast(type')' x,
Delphi,,x is type,x as type,
eC,x'._class',eClass_IsDerived(x._class  type')',,(type')' x
Java,x.getClass(),x instanceof class,(type')' x,
Objective-C (Cocoa),[x' class]'<ref>Only for non-class objects. If x is a class object  [x class] returns only x. The runtime method object_getClass(x) will return the class of x for all objects.</ref>,[x' isKindOfClass:['class' class]]',,(type'*)' x
Swift,x'.dynamicType',x is type,x as! type <br /> x as? type
JavaScript,x.constructor (If not rewritten.),x instanceof class,colspan=3 <ref name="nocast">This language is dynamically typed. Casting between types is unneeded.</ref>
Visual Basic .NET,x'.GetType()',TypeOf x Is type,<ref name="implicit_cast"/>,CType(x'  'type')' or TryCast(x'  'type')',
Xojo,Introspection.GetType(x),x IsA type,,CType(x'  'type')',
Eiffel,x'.generating_type',attached {TYPE} x,attached {TYPE} x as down_x,
Python,type(x')',isinstance(x'  'type')',colspan=3 rowspan=3 <ref name="nocast"/>
PHP,get_class(x')',x instanceof class
Perl,ref(x')',x'->isa("'class'")'
Perl 6,x'.WHAT',x'.isa('class')',<ref name="implicit_cast" />,type'('x')' or<br /> x'.'type,
Ruby,x'.class',x'.instance_of?('type')' or<br /> x'.kind_of?('type')',colspan=3 rowspan=2 <ref name="nocast"/>
Smalltalk,x class,x isKindOf: class
Windows PowerShell,x'.GetType()',x -is [type']',<ref name="implicit_cast" />,[type']'x or x -as [type']',
OCaml,colspan=2 <ref>This language doesn't give run-time type information. It is unneeded because it is statically typed and downcasting is impossible.</ref>,(x :> type')',colspan=2
F#,x'.GetType()',x :? type,(x :?> type')',
COBOL,colspan=2,x AS type<ref name="implicit_cast" />,colspan=2
