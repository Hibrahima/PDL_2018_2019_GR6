,while,do while,for i = first to last,foreach
Ada<ref name="Ada_RM_2012" />,while condition loop statements end loop,loop statements exit when not condition end loop,for index in «'reverse'» [first .. last | discrete_type] loop statements end loop,for item of «'reverse'» iterator loop statements end loop (for [all | some] [in | of] [first .. last | discrete_type | iterator] => predicate')'
ALGOL 68,«'for' index» «'from' first» «'by' increment» «'to' last» «'while' condition» do statements od,for key «'to' upb list» do «'typename' val=list[key];» statements od
«'for' index» «'from' first» «'by' increment» «'to' last» do statements od
APL,:While condition statements :EndWhile,:Repeat statements:Until condition,:For var«s» :In list statements :EndFor,:For var«s» :InEach list statements :EndFor
C (C99),while (condition')' { instructions },do { instructions } while (condition')',for («type» i = first';' i <= last'; ++'i') {' instructions },
Objective-C,for (type item in set') {' instructions }
C++ (STL)
C#,foreach (type item in set') {' instructions }
Java,for (type item : set') {' instructions }
JavaScript,for (var i = first';' i <= last';' i'++) {' instructions },for (var index in set') {' instructions } or for each (var item in set') {' instructions } (JS 1.6+  deprecated<ref></ref>) or for (var item of set') {' instructions } (EcmaScript 6 proposal  supported in Firefox<ref></ref>)
PHP,foreach (range(first'  'last') as $i) {' instructions } or for ($i = first'; $i <= 'last'; $i++) {' instructions },foreach (set as item') {' instructions } or foreach (set as key' =>' item') {' instructions }
Windows PowerShell,for ($i = first'; $i -le 'last'; $i++) {' instructions },foreach (item in set') {' instructions using item }
D,foreach (i; first ... last) { instructions },foreach («type» item; set) { instructions }
Go,for condition' {' instructions },,for i := first';' i <= last'; 'i'++ {' instructions },for key'  'item' := range 'set' {' instructions }
Swift,while condition' {' instructions },repeat { instructions } while condition (2.x)<br /> do { instructions } while condition (1.x),for i = first ... last { instructions } or for i = first ..< last+1 { instructions } or for var i = first';' i <= last'; 'i'++ {' instructions },for item' in 'set' {' instructions }
Perl,while (condition')' { instructions } or until (notcondition')' { instructions },do { instructions } while (condition')' or do { instructions } until (notcondition')',for«'each'»' '«'$i'»' ('first' .. 'last') {' instructions } or for ($i = first'; $i <= 'last'; $i++) {' instructions },for«'each'» «$item» (set') {' instructions }
Perl 6,while condition { instructions } or until notcondition { instructions },repeat { instructions } while condition or repeat { instructions } until notcondition,for first'..'last -> $i { instructions } or loop ($i = first'; $i <='last'; $i++) {' instructions },for set« -> $item» { instructions }
Ruby,while condition instructionsend or until notcondition instructions end,begin instructions end while condition or begin instructions end until notcondition,i|</nowiki> instructions }''',</nowiki>item| instructions }'''
Bash shell,while condition ;do instructionsdone or until notcondition ;do instructions done,,for item in set ;do instructions done
Scala,while (condition')' { instructions },do { instructions } while (condition')',for (i <- first to last «'by 1'»') {' instructions } or first to last «'by 1'» foreach (i => { instructions }),for (item <- set') {' instructions } or set foreach (item => { instructions })
Smalltalk,conditionBlock whileTrue: loopBlock,loopBlock doWhile: conditionBlock,first to: last do: loopBlock,collection do: loopBlock
Common Lisp,(loop while condition' do 'instructions')' or (do () (notcondition') 'instructions')',(loop do instructions' while 'condition')',(loop for i from first' to 'last' «by 1» do 'instructions')' or (dotimes (i N) instructions')' or (do ((i first' (1+ i))) ((>= i 'last')) 'instructions')',(loop for item' in 'list' do 'instructions')' or (loop for item' across 'vector' do 'instructions')' or (dolist (item list') 'instructions')' or (mapc function list')' or (map 'type function sequence')'
Scheme,(do () (notcondition') 'instructions')' or (let loop () (if condition' (begin 'instructions' (loop))))',(let loop () (instructions' (if 'condition' (loop))))',(do ((i first' (+ i 1))) ((>= i 'last')) 'instructions')' or (let loop ((i first')) (if (< i 'last') (begin 'instructions' (loop (+ i 1)))))',(for-each (lambda (item') 'instructions') 'list')'
ISLISP,(while condition' 'instructions')',(tagbody loop instructions (if condition (go loop)),(for ((i first' (+ i 1))) ((>= i 'last')) 'instructions')',(mapc (lambda (item') 'instructions') 'list')'
Pascal,while condition do begin instructions end,repeat instructions until notcondition';',for i := first «'step 1'» to last do begin instructions end;,for item in set do ...
Visual Basic,Do While condition instructionsLoop or Do Until notcondition instructionsLoop,Do instructions Loop While condition or Do instructions Loop Until notcondition,For i = first To last «'Step 1'» instructions Next i,For Each item In set instructions Next item
Visual Basic .NET,For i «'As 'type» = first To last «'Step 1'» instructionsNext i,For Each item As type' In' set instructions Next item
Xojo,While condition instructionsWend,Do Until notcondition instructionsLoop or Do instructions Loop Until notcondition
Python,while condition : instructions «'else:' instructions»,,for item in set':' instructions «'else:' instructions»
S-Lang,while (condition') {' instructions } «'then' optional-block»,do { instructions } while (condition')' «'then' optional-block»,for (i = first'; i <= 'last'; i++) {' instructions } «'then' optional-block»,foreach item'('set')' «'using ('what')'» { instructions } «'then' optional-block»
Fortran,DO WHILE (condition') 'instructions' ENDDO',DO instructions' IF ('condition') EXIT ENDDO',DO I' = 'first' 'last' 'instructions' ENDDO',
Forth,BEGIN « instructions » condition' WHILE 'instructions' REPEAT',BEGIN instructions condition' UNTIL',limit start' DO 'instructions' LOOP',
OCaml,while condition do instructions done,,for i = first' to 'last' do' instructions done,Array.iter (fun item' -> 'instructions') 'array List.iter (fun item' -> 'instructions') 'list
F#,while condition do instructions,,for i = first' to 'last' do' instructions,for item' in 'set' do' instructions or Seq.iter (fun item' -> 'instructions') 'set
Standard ML,while condition do ( instructions ),colspan=2,Array.app (fn item' => 'instructions') 'array app (fn item' => 'instructions') 'list
Haskell (GHC),colspan=2,Control.Monad.forM_ [first'..'last'] (\i -> do 'instructions')',Control.Monad.forM_ list (\item -> do instructions')'
Eiffel,from setup until condition loop instructions end
CoffeeScript,while condition expression,rowspan=6,for i in [first..last] expression,for item in set expression
expression while condition
while condition then expression
until condition expression
expression until condition,for i in [first..last] then expression,for item in set then expression
until condition then expression,expression for i in [first..last],expression for item in set
COBOL,PERFORM procedure-1 «'THROUGH' procedure-2» ««'WITH'» TEST BEFORE» UNTIL condition,PERFORM procedure-1 «'THROUGH' procedure-2» «'WITH'» TEST AFTER UNTIL condition,PERFORM procedure-1 «'THROUGH' procedure-2» VARYING i FROM first BY increment UNTIL i > last,rowspan=2
PERFORM ««'WITH'» TEST BEFORE» UNTIL condition expression END-PERFORM,PERFORM «'WITH'» TEST AFTER UNTIL condition expression END-PERFORM,PERFORM VARYING i FROM first BY increment UNTIL i > last expression END-PERFORM
