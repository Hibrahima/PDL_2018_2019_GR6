Java,C#
<source lang=Java> // The Fibonacci sequence Stream.generate(new Supplier<Integer>() {    int a = 0;    int b = 1;     public Integer get() {        int temp = a;        a = b;        b = a + temp;        return temp;    }  }).limit(10).forEach(System.out::println); </source>,<source lang=CSharp> // The Fibonacci sequence public IEnumerable<int> Fibonacci() {    int a = 0;    int b = 1;     while (true) {        yield return a;        yield return b;        a += b;        b += a;    }  } </source>
[empty],<source lang=CSharp> // print the 10 first Fibonacci numbers foreach (var it in Fibonacci().Take(10)) {    Console.WriteLine(it);  } </source>
Notes for the Java version: The Java 8 Stream interface is a sequence of elements supporting sequential and parallel aggregate operations. generate method returns an infinite sequential unordered stream where each element is generated by the provided Supplier. limit method returns a stream consisting of the elements of this stream  truncated to be no longer than maxSize in length. forEach performs an action for each element of this stream  this action could be a lambda or a method reference.,Notes for the C# version: The infinite Fibonacci sequence is represented by the <kbd>Fibonacci</kbd> method. The method is defined as returning instances of the interface <kbd>IEnumerable<int></kbd>  which allows client code to repeatedly request the next number of a sequence. The <kbd>yield</kbd> keyword converts the method into a generator method. The method body calculates and returns Fibonacci numbers. The <kbd>yield return</kbd> statement returns the next number of the sequence and creates a continuation so that subsequent invocations of the <kbd>IEnumerable</kbd> interface's <kbd>MoveNext</kbd> method will continue execution from the following statement with all local variables intact. The implementation uses two <kbd>yield return</kbd> statements to alternate calculations instead of using a temporary tmp variable.
