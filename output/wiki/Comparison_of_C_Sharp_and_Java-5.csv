Java,C#
Arrays are implicitly direct specializations of <kbd>Object</kbd>. They are not unified with collection types.,Arrays in C# are implicit specializations of the <kbd>System.Array</kbd> class that implements several collection interfaces.
Arrays and collections are completely separate with no unification. Arrays cannot be passed where sequences or collections are expected (though they can be wrapped using <kbd>Arrays.asList</kbd>).,Arrays can be passed where sequences (<kbd>IEnumerable</kbd>s) or collections/list interfaces are expected. However  the collection operations that alter the number of elements (insert/add/remove) will throw exceptions as these operations are unsupported by arrays.
The <kbd>for</kbd> statement accepts either arrays or <kbd>Iterable</kbd>s. All collections implement <kbd>Iterable</kbd>. This means that the same short syntax can be used in for-loops.,The <kbd>foreach</kbd> statement iterates through a sequence using the <kbd>IEnumerable</kbd> or <kbd>IEnumerable<T></kbd> interface. Because arrays always implicitly implement these interfaces  the loop will iterate through arrays also.
In both languages arrays of reference types are covariant. This means that a <kbd>String[]</kbd> array is assignable to variables of <kbd>Object[]</kbd>  as <kbd>String</kbd> is a specialization of (assignable to) <kbd>Object</kbd>. In both languages  the arrays will perform a type check when inserting new values  because type safety would otherwise be compromised. This is in contrast to how generic collections have been implemented in both languages.
No multidimensional arrays (rectangular arrays)  but arrays of references to arrays (jagged arrays).,Multidimensional arrays (rectangular arrays)  and arrays of references to arrays (jagged arrays).
Arrays cannot be resized (though use of the <kbd>System.arraycopy()</kbd> method can allow for multi-step array resizing),Arrays can be resized while preserving existing values using the <kbd>Array.Resize()</kbd> static array method (but this may return a new array).
Implemented as a retrofit for the <kbd>java.util</kbd> library having extra features  like data structures like sets and linked sets  and has several algorithms to manipulate elements of a collection  like finding the largest element based on some <kbd>Comparator<T></kbd> object  finding the smallest element  finding sublists within a list  reverse the contents of a list  shuffle the contents of a list  create immutable versions of a collection  performs sorts  and make binary searches.<ref></ref>,The C# collections framework consists of classes from the <kbd>System.Collections</kbd> and the <kbd>System.Collections.Generic</kbd> namespaces with several useful interfaces  abstract classes  and data structures.<ref></ref> NET 3.5 added <kbd>System.Linq</kbd> namespace that contains various extension methods for querying collections  such as <kbd>Aggregate</kbd>  <kbd>All</kbd>  <kbd>Average</kbd>  <kbd>Distinct</kbd>  <kbd>Join</kbd>  <kbd>Union</kbd> and many others. Queries using these methods are called Language Integrated Query (LINQ).
