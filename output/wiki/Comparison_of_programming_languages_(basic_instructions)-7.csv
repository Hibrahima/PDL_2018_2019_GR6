,variable,constant,type synonym
Ada<ref name="Ada_RM_2012" />,identifier : type «':=' initial_value»,identifier : constant type := final_value,subtype identifier is type
ALGOL 68,modename name «':=' initial_value»;,modename name = value;,mode synonym = modename;
C (C99),type name «'=' initial_value»';',enum{ name = value };,typedef type synonym';'
Objective-C
C++,const type name = value';'
C#,type name «'=' initial_value»';' or var name = value';',const type name = value';' or readonly type name = value';',using synonym = type';'
D,type name «'=' initial_value»';' or auto name = value';',const type name = value';' or immutable type name = value';',alias type synonym';'
Java,type name «'=' initial_value»';',final type name = value';',rowspan=2
JavaScript,var name «'=' initial_value»';',const name = value';'
Go,var name type «'=' initial_value» or name := initial_value,const name «type» = value,type synonym type
Swift,var name «': 'type» «'=' initial_value»,let name «': 'type» = value,typealias synonym = type
Common Lisp,(defparameter name initial_value')' or (defvar name initial_value')' or (setf (symbol-value 'symbol')' initial_value')',(defconstant name value')',(deftype synonym' () ''type')'
Scheme,(define name initial_value')',,
ISLISP,(defglobal name initial_value')' or (defdynamic name initial_value')',(defconstant name value')',
Pascal,name':' type «'=' initial_value»,name = value,synonym = type
Visual Basic,Dim name As type,Const name As type = value,
Visual Basic .NET,Dim name As type«'=' initial_value»''',Imports synonym = type
Xojo,Dim name As type«'=' initial_value»''',
Python,name = initial_value,rowspan=2,synonym = type
CoffeeScript,
S-Lang,name = initial_value';',,typedef struct {...} typename
Fortran,type name,type'  PARAMETER :: ' name = value,
PHP,$name = initial_value';',define("name'"  'value');' <br /> const name' = 'value (5.3+),rowspan=2
Perl,«'my'» $name «'=' initial_value'»;',use constant name => value';'
Perl 6,«'my' «type»» $name «'=' initial_value'»;',«'my' «type»» constant name = value';',::synonym ::= type
Ruby,name = initial_value,Name = value,synonym = type
Scala,var name«':' type» = initial_value,val name«':' type» = value,type synonym = type
Windows PowerShell,«'['type']'»' $'name = initial_value,,
Bash shell,name'='initial_value,,
OCaml,let name «':' type ref» = ref value,let name «':' type» = value,type synonym = type
F#,let mutable name «':' type» = value
Standard ML,val name «':' type ref» = ref value,val name «':' type» = value
Haskell,,«name'::'type';'» name = value,type Synonym = type
Forth,VARIABLE name (in some systems use value VARIABLE name instead),value CONSTANT name,
COBOL,level-number name type clauses'.',«'0'»'1' name CONSTANT «'AS'» value'.',level-number name type clauses «'IS'» TYPEDEF.
Mathematica,name'='initialvalue,,
