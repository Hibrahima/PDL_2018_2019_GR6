C++,Java
<source lang="cpp"> class Foo { // Declares class Foo    int x = 0;       //  Private Member variable. It will                     // be initialized to 0  if the                     // constructor would not set it.                     // (from C++11)    public:      Foo() : x(0)     //  Constructor for Foo; initializes      {}               //  x to 0. If the initializer were                     //  omitted  the variable would                     //  be initialized to the value that                     // has been given at declaration of x.       int bar(int i) { // Member function bar()          return 3*i + x;      }  };</source>,<source lang="java"> class Foo { // Defines class Foo    private int x;        // Member variable  normally declared                          // as private to enforce encapsulation                          // initialized to 0 by default     public Foo() {        // Constructor for Foo    }                     // no-arg constructor supplied by default     public int bar(int i) {        // Member method bar()        return 3*i + x;    }  }</source>
<source lang="cpp"> Foo a; // declares a to be a Foo object value  // initialized using the default constructor. // Another constructor can be used as Foo a(args); // or (C++11): Foo a{args}; </source>,<source lang="java"> Foo a = new Foo(); // declares a to be a reference to a new Foo object // initialized using the default constructor // Another constructor can be used as Foo a = new Foo(args); </source>
<source lang="cpp"> Foo b = a; // copies the contents of a to a new Foo object b; // alternative syntax is "Foo b(a)"</source>,<source lang="java"> // Foo b = a; // would declare b to be reference to the object pointed to by a Foo b = a.clone(); // copies the contents of the object pointed to by a // to a new Foo object; // sets the reference b to point to this new object; // the Foo class must implement the Cloneable interface // for this code to compile </source>
<source lang="cpp">a.x = 5; // modifies the object a</source>,<source lang="java">a.x = 5; // modifies the object referenced by a</source>
<source lang="cpp"> std::cout << b.x << std::endl; // outputs 0  because b is // some object other than a</source>,<source lang="java"> System.out.println(b.x); // outputs 0  because b points to // some object other than a</source>
<source lang="cpp"> Foo *c; // declares c to be a pointer to a // Foo object (initially // undefined; could point anywhere)</source>,<source lang="java"> Foo c; // declares c to be a reference to a Foo // object (initially null if c is a class member; // it is necessary to initialize c before use // if it is a local variable)</source>
<source lang="cpp"> c = new Foo; // c is set to the value of the address of the Foo object created by operator new</source>,<source lang="java"> c = new Foo(); // binds c to reference a new Foo object</source>
<source lang="cpp"> Foo &d = *c; // binds d to reference the same object to which c points</source>,<source lang="java"> Foo d = c; // binds d to reference the same object as c</source>
<source lang="cpp"> c->x = 5; // modifies the object pointed to by c</source>,<source lang="java"> c.x = 5; // modifies the object referenced by c</source>
<source lang="cpp"> a.bar(5); // invokes Foo::bar() for a c->bar(5); // invokes Foo::bar() for *c </source>,<source lang="java"> a.bar(5); // invokes Foo.bar() for a c.bar(5); // invokes Foo.bar() for c </source>
<source lang="cpp"> std::cout << d.x << std::endl; // outputs 5  because d references the // same object to which c points</source>,<source lang="java"> System.out.println(d.x); // outputs 5  because d references the // same object as c</source>
