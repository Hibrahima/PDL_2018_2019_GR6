,class,protocol,namespace
ABAP Objects,class name definition «'inheriting from' parentclass»'.' «'interfaces:' interfaces'.'» method_and_field_declarations endclass.<br />class name implementation. method_implementations endclass.,interface name'.' members endinterface.,
C++ (STL),class name«' : public 'parentclasses<ref name="multi">This language supports multiple inheritance. A class can have more than one parent class</ref>»' { 'members' };',,namespace name' { 'members' }'
C#,class name«' : '«parentclass»«' ' interfaces»»' { 'members' }',interface name«' : 'parentinterfaces» { members }'''
D,module name';' <br /> members
eC,class name« : base class» { «default member values assignments» «members» },,namespace name;
Java,class name«' extends 'parentclass»«' implements 'interfaces»' { 'members' }',interface name«' extends 'parentinterfaces» { members }''',package name';' members
PHP,namespace name'; 'members
Objective-C,@interface name«' : 'parentclass»<ref>Not providing a parent class makes the class a root class. In practice  this is almost never done. One should generally use the conventional base class of the framework one is using  which is NSObject for Cocoa and GNUstep  or Object otherwise.</ref>«'<' protocols >»' { 'instance_fields' } 'method_and_property_declarations' @end <br /> @implementation 'name method_implementations' @end'<ref>Usually the @interface portion is placed into a header file  and the @interface portion is placed into a separate source code file.</ref>,@protocol name«'<' parentprotocols >» members' @end',
Swift,class name«' : '«parentclass»«' ' protocols»»' { 'members' }',protocol name«' : 'parentprotocols»' { 'members' }',
Python,class name«'('parentclasses<ref name="multi" />)»':<br /> 'members,<ref>In Python interfaces are classes which methods have pass as their bodies</ref>,__all__ = [ member1' 'member2' ... ]'
Visual Basic .NET,Class name«' Inherits 'parentclass»«' Implements 'interfaces»<br />members <br />End Class,Interface name«' Inherits 'parentinterfaces»<br />members <br />End Interface,Namespace name<br />members <br />End Namespace
Xojo,Class name«' Inherits 'parentclass»«' Implements 'interfaces»<br />members <br />End Class,Interface name«' Inherits 'parentinterfaces»<br />members <br />End Interface,Module name<br />members <br />End Module
Eiffel,class name«' inherit 'parentclasses<ref name="multi" />»<br />members<br />end,colspan=2
Perl,package name'; '«'@ISA = qw('parentclasses<ref name="multi" />);» members 1;,,package name';' members
Perl 6,class name «'is' parentclass «'is' parentclass ...<ref name="multi" />»» «'does' role «'does' role ...»» { members },role name «'does' role «'does' role ...»» { members },module name { members }
Ruby,class name« < parentclass» <br /> members <br /> end,,module name <br /> members <br /> end
Windows PowerShell,colspan=3
OCaml,class name «parameters»' = object '«'(self)'» «'inherit 'parentclass «parameters» «'inherit 'parentclass «parameters» ...<ref name="multi" />»» members end,,module name <br /> members
F#,type name«'('parameters')'»' '«'as this'» = class «'inherit 'parentclass«'('parameters')'» «'as base'»» members «'interface' interface with implementation «'interface' interface with implementation ...»» end,type name = interface members end,namespace name <br /> members
Smalltalk,<ref>The class is an Object. Just send a message to the superclass (st-80) or the destination namespace (Visualworks).</ref>,,<ref>The namespace is an Object. Just send a message to the parent namespace.</ref>
JavaScript (ES6),class name «'extends' parentclass» { members },,
Object Pascal (Delphi),,package name';' members
Scala
COBOL,
Cobra,class name «'inherits' parentclass» «'implements' interfaces»<br /> members,interface name «'inherits' parentinterfaces»<br /> members,namespace name<br /> members
ISLISP,(defclass name (base-class) ((x :initform 0 :accessor get-x :initarg x)) (:abstractp nil)),,
